#!/bin/bash

#===============================================================================
# This script prepares the local repository (usually a production site) to
# receive pushes from a remote repository (usually a development site) and
# automatically update the working copy when that happens so you can deploy
# simply by doing "git push live master".
#
# It includes a pre-receive hook to make sure there are no local changes before
# accepting the changes. This includes new untracked files to be on the safe
# side. (If you need to override this you will have to SSH to the remote site
# and manually pull from the development site instead.)
#===============================================================================

pre_hook=.git/hooks/pre-receive
post_hook=.git/hooks/post-receive
replacement_script=scripts/deploy/install-push-hook.sh

source $HOME/.bash/colors.sh

if [ -f "$replacement_script" ]; then
    red bold "This script is deprecated and has been superceeded for this project." >&2
    echo >&2
    black bold "Please run this script instead:" >&2
    white bold "$replacement_script" >&2
    exit 1
fi

yellow bold "WARNING: This script is deprecated - you should add these scripts from the PHP Site Templates repo instead:"
white bold "$replacement_script"
white bold "scripts/deploy/_after-deploy.sh"
echo

if [ "$1" != "-f" ]; then

    err=0

    if [ -f $pre_hook ]; then
        echo "Error: '$pre_hook' already exists (add -f to overwrite)" >&2
        err=1
    fi

    if [ -f $post_hook ]; then
        echo "Error: '$post_hook' already exists (add -f to overwrite)" >&2
        err=1
    fi

    if [ $err = 1 ]; then
        exit 1
    fi

fi

cp -f ~/lib/git-push-hook/pre-receive.sh $pre_hook
cp -f ~/lib/git-push-hook/post-receive.sh $post_hook

chmod +x $pre_hook $post_hook

git config receive.denyCurrentBranch ignore

echo "Push hook installed."
