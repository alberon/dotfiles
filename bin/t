#!/bin/bash
set -o nounset -o pipefail -o errexit
shopt -s nullglob

#================================================================================
# Script runner - (c) Dave James Miller 2015 - MIT License
# See README.md for details of how it works
#================================================================================

aqua()            { echo -en "\e[36;1m"; echo "$@"; echo -en "\e[0m"; }
blue()            { echo -en "\e[34;1m"; echo "$@"; echo -en "\e[0m"; }
green()           { echo -en "\e[32;1m"; echo "$@"; echo -en "\e[0m"; }
red()             { echo -en "\e[31;1m"; echo "$@"; echo -en "\e[0m"; }
white()           { echo -en "\e[37;1m"; echo "$@"; echo -en "\e[0m"; }
white_underline() { echo -en "\e[37;1;4m"; echo "$@"; echo -en "\e[0m"; }
yellow()          { echo -en "\e[33;1m"; echo "$@"; echo -en "\e[0m"; }

exe="$(basename "$0")"

# Locate the scripts directory
if ! root="$(findup -d scripts)"; then
    echo "'scripts' directory not found" >&2
    exit 1
fi

# Subdirectory?
scripts="$root/scripts"
prefix=

while [ $# -gt 0 -a -d "$scripts/${1:-}" ]; do
    scripts="$scripts/$1"
    prefix="$prefix$1 "
    shift
done

# Run script?
if [ $# -gt 0 ]; then
    cmd="$1"

    for script in "$scripts/$cmd"{,.*}; do
        if [ -f "$script" ]; then
            shift
            exec "$script" "$@"
        fi
    done

    echo "Script '$prefix$cmd' not found" >&2
    exit 1
fi

# Display list of scripts
list_scripts() {
    local cmd="$1"
    local dir="$2"

    for file in "$dir/"*; do
        [ -e "$file" ] || continue

        name="$(basename "$file")" # Remove path
        name="${name%%.*}"         # Remove extension
        if [ "${name:0:1}" = "_" ]; then
            : # Skip includes (files starting with "_")
        elif [ -d "$file" ]; then
            list_scripts "$cmd$name " "$file"
        elif [[ "$name" == *" "* ]]; then
            # Spaces in the name
            display_help "$file" "$cmd'$name'"
        else
            display_help "$file" "$cmd$name"
        fi
    done
}

# Display help text for a file
display_help() {
    gawk '
        function output_title() {
            if (title) {
                print "\n\033[33;1m" title "\033[0m\n"
                if (target)
                    print "    \033[35m" target ":\033[0m"
                title = ""
            }
        }

        BEGIN {
            title  = "'"$2"'"
            target = ""
            line   = 0
            output = 0
        }

        # Convert Windows new lines to Unix
        {
            sub(/\r$/, "")
        }

        # Start/stop marker
        /#{78}/ {
            if (output) {
                # Stop
                exit
            } else {
                # Start
                output = 1
                next
            }
        }

        # Text line
        output {
            output_title()

            # Basic Markdown support (Note: "mdview" command is too slow for this)
            text = $0

            # Remove comment markers
            text = gensub("^#\\s?", "", 1)

            # Target: - Purple
            text = gensub("^.*:$", "\033[35m\\0\033[0m", 1, text)

            # **Bold** - Red
            text = gensub("\\*\\*([^*]+)\\*\\*", "\033[31;1m\\1\033[0m", "g", text)

            # *Italic* - Green
            text = gensub("\\*([^*]+)\\*", "\033[32;1m\\1\033[0m", "g", text)

            # `Code` - Aqua
            text = gensub("`([^`]+)`", "\033[36m\\1\033[0m", "g", text)

            # URLs - underline
            text = gensub("https?://[^ )]+", "\033[4m\\0\033[0m", "g", text)

            print "   " text
        }

        # End of file
        END {
            if (!output) {
                output_title()
                print "    \033[30;1mNo help text available\033[0m"
            }
        }
    ' "$1"
}

(
    if [ -n "$prefix" ]; then
        white_underline "Matching Scripts"
    else
        white_underline "Available Scripts"
    fi

    list_scripts "$prefix" "$scripts"
) | less
